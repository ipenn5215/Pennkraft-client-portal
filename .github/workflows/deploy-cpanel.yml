name: Deploy to cPanel

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Build application
        env:
          NEXT_PUBLIC_APP_URL: ${{ secrets.PRODUCTION_URL }}
          DATABASE_URL: ${{ secrets.POSTGRES_DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          npm run build

      - name: Generate Prisma Client for PostgreSQL
        env:
          DATABASE_URL: ${{ secrets.POSTGRES_DATABASE_URL }}
        run: |
          npx prisma generate --schema=./prisma/schema-postgres.prisma

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.POSTGRES_DATABASE_URL }}
        run: |
          npx prisma migrate deploy --schema=./prisma/schema-postgres.prisma || echo "Migrations may need manual deployment"
        continue-on-error: true

      - name: Prepare deployment package
        run: |
          # Create deployment directory
          mkdir -p deploy-package

          # Copy production files
          cp -r .next deploy-package/
          cp -r public deploy-package/
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          cp next.config.js deploy-package/

          # Copy Prisma files
          mkdir -p deploy-package/prisma
          cp prisma/schema-postgres.prisma deploy-package/prisma/schema.prisma

          # Create production start script
          echo '#!/bin/bash' > deploy-package/start.sh
          echo 'export NODE_ENV=production' >> deploy-package/start.sh
          echo 'npm start' >> deploy-package/start.sh
          chmod +x deploy-package/start.sh

          # Create .htaccess for Node.js app (if needed for subdomain)
          mkdir -p deploy-package/public_html
          cat > deploy-package/public_html/.htaccess << 'EOF'
          RewriteEngine On
          RewriteRule ^(.*)$ http://127.0.0.1:$PORT/$1 [P,L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          EOF

      - name: Deploy to cPanel via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          local-dir: ./deploy-package/
          server-dir: ${{ secrets.FTP_SERVER_DIR }}
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.env*
            **/*.md
            **/tests/**
            **/.vscode/**

      - name: Setup Node.js Application in cPanel (First Deploy Only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Manual steps required in cPanel:"
          echo "1. Go to cPanel > Software > Setup Node.js App"
          echo "2. Create new application with Node.js ${{ env.NODE_VERSION }}"
          echo "3. Set application root to: ${{ secrets.FTP_SERVER_DIR }}"
          echo "4. Set startup file to: npm start or start.sh"
          echo "5. Add environment variables from GitHub Secrets"
          echo "6. Click 'Create' and then 'Run NPM Install'"
          echo "7. Start the application"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Application should be available at: ${{ secrets.PRODUCTION_URL }}"
          else
            echo "‚ùå Deployment failed. Check the logs for details."
          fi